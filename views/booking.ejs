<!DOCTYPE html>

<head>
    <%- include('layouts/navbar'); -%>
        <title>Booking</title>
</head>

<body>

    <div class="fade-in-container">

        <div class="options">
            <div class="colouredBox">
                <input type="button" onclick="submit" id="option1" value="Select">

            </div>

            <div class="colouredBox">
                <input type="button" onclick="submit" id="option2" value="Select">

            </div>

            <div class="colouredBox">
                <input type="button" onclick="submit" id="option3" value="Select">


            </div>

            <div class="colouredBox">
                <input type="button" onclick="submit" id="option4" value="Select">


            </div>

        </div>
        <!-- 
            <p id="test">hello</p>
            <p id="test1">hello</p>
            <p id="test2">hello</p>
         -->
        

        <button id = "time1" hidden onclick="returnTime(1)">1</button>
        <button id = "time2" hidden onclick="returnTime(2)">2</button>
        <button id = "time3" hidden onclick="returnTime(3)">3</button> <br> <br>

        <!-- <p id = "showTime">test</p> -->

        <!-- <button onclick="updateDatabase()"></button> DO NOT PRESS THIS IS A RESET DATABASE BUTTON OASKJDLAKSJDLKASJDLKJL-->
        
        <div>
            <button onclick="updateCalendar(0)">Previous</button>
            <button onclick="updateCalendar(1)">Next</button>
        </div>


        <div class="calendar">
            <div class="day">Sun</div>
            <div class="day">Mon</div>
            <div class="day">Tue</div>
            <div class="day">Wed</div>
            <div class="day">Thu</div>
            <div class="day">Fri</div>
            <div class="day">Sat</div>


            <button id="0" class="day" onclick="getDay(0)"></button>
            <button id="1" class="day" onclick="getDay(1)"></button>
            <button id="2" class="day" onclick="getDay(2)"></button>
            <button id="3" class="day" onclick="getDay(3)"></button>
            <button id="4" class="day" onclick="getDay(4)"></button>
            <button id="5" class="day" onclick="getDay(5)"></button>
            <button id="6" class="day" onclick="getDay(6)"></button>
            <button id="7" class="day" onclick="getDay(7)"></button>
            <button id="8" class="day" onclick="getDay(8)"></button>
            <button id="9" class="day" onclick="getDay(9)"></button>
            <button id="10" class="day" onclick="getDay(10)"></button>
            <button id="11" class="day" onclick="getDay(11)"></button>
            <button id="12" class="day" onclick="getDay(12)"></button>
            <button id="13" class="day" onclick="getDay(13)"></button>
            <button id="14" class="day" onclick="getDay(14)"></button>
            <button id="15" class="day" onclick="getDay(15)"></button>
            <button id="16" class="day" onclick="getDay(16)"></button>
            <button id="17" class="day" onclick="getDay(17)"></button>
            <button id="18" class="day" onclick="getDay(18)"></button>
            <button id="19" class="day" onclick="getDay(19)"></button>
            <button id="20" class="day" onclick="getDay(20)"></button>
            <button id="21" class="day" onclick="getDay(21)"></button>
            <button id="22" class="day" onclick="getDay(22)"></button>
            <button id="23" class="day" onclick="getDay(23)"></button>
            <button id="24" class="day" onclick="getDay(24)"></button>
            <button id="25" class="day" onclick="getDay(25)"></button>
            <button id="26" class="day" onclick="getDay(26)"></button>
            <button id="27" class="day" onclick="getDay(27)"></button>
            <button id="28" class="day" onclick="getDay(28)"></button>
            <button id="29" class="day" onclick="getDay(29)"></button>
            <button id="30" class="day" onclick="getDay(30)"></button>
            <button id="31" class="day" onclick="getDay(31)"></button>
            <button id="32" class="day" onclick="getDay(32)"></button>
            <button id="33" class="day" onclick="getDay(33)"></button>
            <button id="34" class="day" onclick="getDay(34)"></button>
            <button id="35" class="day" onclick="getDay(35)"></button>
            <button id="36" class="day" onclick="getDay(36)"></button>

        </div>

    </div>

</body>

<style>
    body {
        font-family: Arial, sans-serif;
        text-align: center;
        margin: 20px;
    }

    .calendar {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 5px;
    }

    .day {
        width: 30px;
        height: 30px;
        line-height: 30px;
        border: 1px solid #ccc;
        cursor: pointer;
    }

    .options {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
    }

    .colouredBox {
        width: 200px;
        height: 300px;
        background-color: #3498db;
        border-color: black;
        border-radius: 1px;
        text-align: center;
        justify-content: center;
        align-items: center;
        margin: 20px;
        padding: 20px;

    }

    .calendar {
        display: grid;
        grid-template-columns: repeat(7, 50px);
        gap: 5px;
    }

    .day {
        width: 50px;
        height: 50px;
        border: 1px solid #ccc;
        border-radius: 5px;
        cursor: pointer;
    }
</style>



<script>
    let month;
    let daysInMonth;
    let firstDay;

    let nextMonth;
    let nextDaysInMonth;
    let nextFirstDay;

    const currentMonthDate = new Date();
    const nextMonthDate = new Date();

    let viewingMonth;

    let adminSchedule;

    updateCurrentInfo();
    updateNextInfo();
    updateCalendar(0);

    let schedule = [];
    let month1 = [];
    let month2 = [];

    getAdminSchedule();

    async function getAdminSchedule() {
        try {
            // Make a fetch request to the /admin-schedule endpoint
            const response = await fetch('/admin-schedule');
            adminSchedule = await response.json();
        } catch (error) {
            // Handle errors
            console.error("Error getting admin schedule:", error);
            document.getElementById('adminScheduleResult').innerHTML = "Error getting admin schedule.";
        }
    }

    async function updateDatabase(){
        try {
            // Make a fetch request to the /admin-schedule endpoint
            const response = await fetch('/update-admin');
            adminSchedule = await response.json();
        } catch (error) {
            // Handle errors
            console.error("Error getting admin schedule:", error);
            document.getElementById('adminScheduleResult').innerHTML = "Error getting admin schedule.";
        }
    }



    function updateArray() {

        for (let i = 1; i < daysInMonth + 1; i++) {
            let times = ["time1", "time2", "time3"];
            month1.push(times);
        }

        for (let i = 1; i < nextDaysInMonth + 1; i++) {
            let times2 = ["time1", "time2", "time3"];
            month2.push(times2);
        }

        schedule.push(month1);
        schedule.push(month2);

        //document.getElementById("test1").innerHTML = schedule[1][28][0];

        return schedule;

    }


    function createJSONTest() {

        let scheduleArr = updateArray();

        let jsonObjectArrayTest = {};
        let monthArr = {};
        let daysArr = {};

        for (let i = 0; i < scheduleArr.length; i++) {
            for (let j = 0; j < scheduleArr[i].length; j++) {

                for (let k = 0; k < schedule[i][j]; k++) {

                    daysArr.push(scheduleArr[i][j][k])

                }
            }
            monthArr.push(scheduleArr[i][j] + daysArr)
        }
        jsonObjectArrayTest.push(schedule[i] + monthArr);

        return jsonObjectArrayTest;

    }


    function testJSON() {

        let testArr = turnArrJSON();

        document.getElementById("test").innerHTML = testArr[1][0][2];


    }

    function turnArrJSON() {
        let testArray = updateArray();
        let JSONArray = JSON.parse(JSON.stringify(testArray));

        return JSONArray;
    }



    const defaultTimesInstance = new defaultTimes();

    function createDefaultJSON() {
        for (let i = 0; i < 37; i++) {
            if (i > firstDay) {
                new defaultTimes;
            }
        }
    }


    function updateCalendar(currentOrNext) {
        if (currentOrNext != viewingMonth){
            document.getElementById("time1").style.display = "none";
            document.getElementById("time2").style.display = "none";
            document.getElementById("time3").style.display = "none";
        }
        
        clearCalendar();
        if (currentOrNext == 0) {
            let counter = firstDay;
            for (let i = 0; i < daysInMonth; i++) {
                let day = i + 1;
                let tempDay = document.getElementById((firstDay + i).toString());
                tempDay.textContent = day;
                let timeSlots = {}

            }

        }
        else {
            let counter = nextFirstDay;
            for (let i = 0; i < nextDaysInMonth; i++) {
                let tempDay = document.getElementById((nextFirstDay + i).toString());
                tempDay.textContent = i + 1;
            }


        }

        viewingMonth = currentOrNext;


    }

    function clearCalendar() {
        for (let i = 0; i < 37; i++) {
            let tempDay = document.getElementById(i.toString());
            tempDay.textContent = "";
        }
    }

    function updateCurrentInfo() {

        currentMonthDate.setDate(1);
        month = currentMonthDate.getMonth();
        daysInMonth = getDaysInMonth(currentMonthDate.getFullYear(), currentMonthDate.getMonth());
        firstDay = currentMonthDate.getDay();
    }

    function updateNextInfo() {
        nextMonth = (month + 1) % 12;
        nextMonthDate.setMonth(nextMonth);
        if (month == 11) {
            nextMonthDate.setFullYear(currentMonthDate.getFullYear() + 1);
        }
        nextMonthDate.setDate(1);
        nextFirstDay = nextMonthDate.getDay();
        nextDaysInMonth = getDaysInMonth(nextMonthDate.getFullYear(), nextMonthDate.getMonth());

    }

    function getDaysInMonth(year, month) {
        const lastDay = new Date(year, month + 1, 0).getDate();
        return lastDay;
    }



    function getDay(dayInput) {

        var tempMonth = new Date();

        let tempSelectedDay = document.getElementById(dayInput).innerText;

        let currentMonthIndex;
        let currentMonthName;


        if (viewingMonth == 0) {
            currentMonthIndex = tempMonth.getMonth();
        }

        else if (viewingMonth == 1) {
            currentMonthIndex = tempMonth.getMonth() + 1;
        }

        let monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

        currentMonthName = monthNames[currentMonthIndex % 12];

        let testArr = turnArrJSON();

        //document.getElementById("test2").innerHTML = currentMonthName + " " + tempSelectedDay + " " + testArr[viewingMonth][tempSelectedDay];


        document.getElementById("time1").style.display = "block";
        document.getElementById("time2").style.display = "block";
        document.getElementById("time3").style.display = "block";

        document.getElementById("time1").innerHTML = JSON.stringify(adminSchedule.Schedule[viewingMonth][tempSelectedDay-1][0][0]);
        document.getElementById("time2").innerHTML = JSON.stringify(adminSchedule.Schedule[viewingMonth][tempSelectedDay-1][1][0]);
        document.getElementById("time3").innerHTML = JSON.stringify(adminSchedule.Schedule[viewingMonth][tempSelectedDay-1][2][0]);

    }

    function returnTime(timeSlotIndex){

        let timeId = "time"+timeSlotIndex;

        document.getElementById("showTime").innerHTML = document.getElementById(timeId).textContent;


    }


</script>



<style>
    .day {
        background-color: aliceblue;

    }

    .day:hover {
        background-color: beige;
    }

    .day:active {
        background-color: bisque;
    }
</style>


<footer>
    <%- include('layouts/footer'); -%>
</footer>


</html>